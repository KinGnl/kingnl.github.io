<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="Raylib_8cpp" kind="file" language="C++">
    <compoundname>Raylib.cpp</compoundname>
    <includes refid="Raylib_8hpp" local="yes">Raylib.hpp</includes>
    <incdepgraph>
      <node id="18">
        <label>../R-typeClient/includes/Component.hpp</label>
        <link refid="R-typeClient_2includes_2Component_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Entity.hpp</label>
        <link refid="Entity_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>../../ecs_architecture/includes/Registry.hpp</label>
        <link refid="Registry_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>SparseArray.hpp</label>
        <link refid="SparseArray_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../../general/ClockTime.hpp</label>
        <link refid="ClockTime_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>../../general/Error.hpp</label>
        <link refid="Error_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../general/default_libs.hpp</label>
        <link refid="default__libs_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../IDisplay.hpp</label>
        <link refid="IDisplay_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/graphic_lib_encapsulation/Raylib/Raylib.cpp</label>
        <link refid="Raylib_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Raylib.hpp</label>
        <link refid="Raylib_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="26">
        <label>any</label>
      </node>
      <node id="31">
        <label>boost/property_tree/json_parser.hpp</label>
      </node>
      <node id="32">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="28">
        <label>chrono</label>
      </node>
      <node id="29">
        <label>deque</label>
      </node>
      <node id="5">
        <label>dlfcn.h</label>
      </node>
      <node id="12">
        <label>fstream</label>
      </node>
      <node id="16">
        <label>functional</label>
      </node>
      <node id="11">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>list</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="14">
        <label>optional</label>
      </node>
      <node id="30">
        <label>raylib.h</label>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="10">
        <label>thread</label>
      </node>
      <node id="25">
        <label>typeindex</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Raylib_8cpp_1a59cf938b2e852bc67cb921335934e024" prot="public" static="no">
        <type>graphics::Keyboard</type>
        <definition>using Keyboard =  graphics::Keyboard</definition>
        <argsstring></argsstring>
        <name>Keyboard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/graphic_lib_encapsulation/Raylib/Raylib.cpp" line="12" column="1" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/graphic_lib_encapsulation/Raylib/Raylib.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Raylib_8cpp_1ab134dd9edf58f9f4654766e6a2e10c79" prot="public" static="no" mutable="no">
        <type>boost::property_tree::ptree</type>
        <definition>boost::property_tree::ptree _sound</definition>
        <argsstring></argsstring>
        <name>_sound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/graphic_lib_encapsulation/Raylib/Raylib.cpp" line="10" column="29" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/graphic_lib_encapsulation/Raylib/Raylib.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2022</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>Raylib</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Raylib.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">boost::property_tree::ptree<sp/>_sound;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Keyboard<sp/>=<sp/>graphics::Keyboard;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="classRaylib_1a6912339ce0a1c189a7b756ad3ca1fe50" kindref="member">Raylib::Raylib</ref>()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::property_tree::read_json(</highlight><highlight class="stringliteral">&quot;sounds.json&quot;</highlight><highlight class="normal">,<sp/>_sound);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="classRaylib_1a73c8b0f22704986442fd4d63146ac0a7" kindref="member">Raylib::~Raylib</ref>()</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a6817466000222151e6dea205ba5d44e6" kindref="member">Raylib::openWin</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>screenWidth<sp/>=<sp/>1280;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>screenHeight<sp/>=<sp/>668;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>InitWindow(screenWidth,<sp/>screenHeight,<sp/></highlight><highlight class="stringliteral">&quot;R-TYPE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Image<sp/>image<sp/>=<sp/>LoadImage(</highlight><highlight class="stringliteral">&quot;./design_resources/assets/icon.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>SetWindowIcon(image);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>InitAudioDevice();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>SetExitKey(KEY_NULL);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>_poll_event<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1ab07e6a62d1031b183c9cf894ee1a5f3a" kindref="member">Raylib::getScreenWidth</ref>()</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetScreenWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>screen<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1af0fd264584fc278602d28188cfc04123" kindref="member">Raylib::getScreenHeight</ref>()</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetScreenHeight();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a5102ca76dfb9e5dd2b3dd2bfbda3a04d" kindref="member">Raylib::setFps</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fps)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>SetTargetFPS(fps);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a72c614e50e0ba7cc2994f7b4c9a2e3b5" kindref="member">Raylib::isOpen</ref>()</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!WindowShouldClose());</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a553668e178d1a09c176293f2e3210ead" kindref="member">Raylib::closeWin</ref>()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;sound<sp/>:<sp/>_sounds)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnloadSound(sound.second);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;img<sp/>:<sp/>_images)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnloadImage(img.second);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;tex<sp/>:<sp/>_textures)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnloadTexture(tex.second);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;font<sp/>:<sp/>_fonts)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnloadFont(font.second);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseAudioDevice();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseWindow();</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a70c7f9c8a078818a737a796d21594c5f" kindref="member">Raylib::pollEvent</ref>()</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>_poll_event<sp/>=<sp/>!_poll_event;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_poll_event;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1ae2f46bc478414d002510e8268fc94107" kindref="member">Raylib::beginDrawing</ref>()</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>BeginDrawing();</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a452fd23d2d7412fb4a3035c7337f28f2" kindref="member">Raylib::clearBackground</ref>()</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearBackground(BLACK);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1ab24a2afc51a35fe0cd8d99632d82b144" kindref="member">Raylib::draw</ref>(<ref refid="structcomponent_1_1position" kindref="compound">component::position</ref><sp/>posComp,<sp/><ref refid="structcomponent_1_1drawable" kindref="compound">component::drawable</ref><sp/>drawComp)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.type<sp/>==<sp/>DrawType::Text<sp/>||<sp/>drawComp.type<sp/>==<sp/>DrawType::Username)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>drawComp.font_path;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_fonts.find(key)<sp/>==<sp/>_fonts.end())</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fonts.emplace(key,<sp/>LoadFont(drawComp.font_path.c_str()));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawTextEx(_fonts[key],<sp/>drawComp.text.c_str(),<sp/>{<sp/>posComp.x,<sp/>posComp.y<sp/>},<sp/>_fonts[key].baseSize*drawComp.font_scale,<sp/>drawComp.font_spacing,<sp/>(Color){<sp/>drawComp.color.red,<sp/>drawComp.color.green,<sp/>drawComp.color.blue,<sp/>drawComp.color.alpha<sp/>});</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.type<sp/>==<sp/>DrawType::Rectangle)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawRectangle(posComp.x,<sp/>posComp.y,<sp/>drawComp.rec_width,<sp/>drawComp.rec_height,<sp/>(Color){<sp/>drawComp.color.red,<sp/>drawComp.color.green,<sp/>drawComp.color.blue,<sp/>drawComp.color.alpha<sp/>});</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.type<sp/>==<sp/>DrawType::Image)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>drawComp.img_path;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_images.find(key)<sp/>==<sp/>_images.end())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_images.emplace(key,<sp/>LoadImage(drawComp.img_path.c_str()));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textures.emplace(key,<sp/>LoadTextureFromImage(_images[key]));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>_images[key].width;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>_images[key].height;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.scale)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageResize(&amp;_images[key],<sp/>drawComp.img_scale_x,<sp/>drawComp.img_scale_y);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>_images[key].width<sp/>||<sp/>height<sp/>!=<sp/>_images[key].height)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textures[key]<sp/>=<sp/>LoadTextureFromImage(_images[key]);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawTexture(_textures[key],<sp/>posComp.x,<sp/>posComp.y,<sp/>WHITE);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.type<sp/>==<sp/>DrawType::Changing)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>drawComp.img_paths[drawComp.index];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_images.find(key)<sp/>==<sp/>_images.end())<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_images.emplace(key,<sp/>LoadImage(key.c_str()));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textures.emplace(key,<sp/>LoadTextureFromImage(_images[key]));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>_images[key].width;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>_images[key].height;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.scale)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageResize(&amp;_images[key],<sp/>drawComp.img_scale_x,<sp/>drawComp.img_scale_y);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>_images[key].width<sp/>||<sp/>height<sp/>!=<sp/>_images[key].height)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textures[key]<sp/>=<sp/>LoadTextureFromImage(_images[key]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawTexture(_textures[key],<sp/>posComp.x,<sp/>posComp.y,<sp/>WHITE);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.type<sp/>==<sp/>DrawType::AnimImage<sp/>||<sp/>drawComp.type<sp/>==<sp/>DrawType::Button)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>drawComp.img_path;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_images.find(key)<sp/>==<sp/>_images.end())<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_images.emplace(key,<sp/>LoadImage(drawComp.img_path.c_str()));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textures.emplace(key,<sp/>LoadTextureFromImage(_images[key]));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>_images[key].width;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>_images[key].height;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drawComp.scale)<sp/>ImageResize(&amp;_images[key],<sp/>drawComp.img_scale_x,<sp/>drawComp.img_scale_y);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>_images[key].width<sp/>||<sp/>height<sp/>!=<sp/>_images[key].height)<sp/>_textures[key]<sp/>=<sp/>LoadTextureFromImage(_images[key]);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawTextureRec(_textures[key],<sp/>{<sp/>(float)drawComp.currentFramex*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)_images[key].width/drawComp.limit_x,<sp/>drawComp.currentFramey*(float)_images[key].height/drawComp.limit_y,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)_images[key].width/drawComp.limit_x,<sp/>(float)_images[key].height/drawComp.limit_y},<sp/>{<sp/>posComp.x,<sp/>posComp.y<sp/>},<sp/>WHITE);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1a247b79289042dffcbaa45eaa90e1a9c4" kindref="member">Raylib::endDrawing</ref>()</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>EndDrawing();</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Raylib::getCharPressed()</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(GetCharPressed());</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1ae89ed6e0dc80c915e007b85ddb9e257e" kindref="member">Raylib::isKeyPressed</ref>(Keyboard<sp/>key)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyA)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_A);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_B);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyC)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_C);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyD)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_D);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_E);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_F);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyG)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_G);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyH)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_H);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyI)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_I);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyJ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_J);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_K);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_L);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyM)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_M);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyN)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_N);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyO)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_O);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyP)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_P);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyQ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_Q);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_R);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_S);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_T);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyU)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_U);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyV)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_V);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyW)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_W);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_X);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_Y);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyZ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_Z);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyUp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_UP);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyDown)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_DOWN);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyLeft)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_LEFT);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyRight)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_RIGHT);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyEnter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_ENTER);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keySpace)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_SPACE);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyDel)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_BACKSPACE);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyESC)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_ESCAPE);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_1);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_2);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_3);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_4);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key5)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_5);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key6)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_6);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_7);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_8);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key9)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyPressed(KEY_KP_9);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1abdd2681427e02f7c2a4a24ff8325bb6c" kindref="member">Raylib::isKeyBeingPressed</ref>(Keyboard<sp/>key)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyA)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_A);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_B);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyC)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_C);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyD)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_D);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_E);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_F);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyG)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_G);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyH)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_H);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyI)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_I);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyJ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_J);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_K);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_L);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyM)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_M);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyN)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_N);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyO)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_O);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyP)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_P);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyQ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_Q);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_R);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_S);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_T);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyU)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_U);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyV)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_V);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyW)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_W);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_X);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_Y);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyZ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_Z);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyUp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_UP);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyDown)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_DOWN);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyLeft)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_LEFT);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyRight)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_RIGHT);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyEnter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_ENTER);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keySpace)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_SPACE);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyDel)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_BACKSPACE);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyESC)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_ESCAPE);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_0);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_2);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_3);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_4);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key5)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_5);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key6)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_6);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_7);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_8);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key9)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyDown(KEY_KP_9);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRaylib_1af01e7b95d67a38b65665fe0596c6ece2" kindref="member">Raylib::isKeyReleased</ref>(Keyboard<sp/>key)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyA)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_A);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_B);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyC)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_C);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyD)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_D);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_E);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_F);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyG)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_G);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyH)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_H);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyI)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_I);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyJ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_J);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_K);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_L);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyM)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_M);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyN)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_N);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyO)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_O);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyP)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_P);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyQ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_Q);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_R);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_S);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_T);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyU)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_U);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyV)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_V);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyW)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_W);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_X);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_Y);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyZ)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_Z);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyUp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_UP);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyDown)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_DOWN);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyLeft)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_LEFT);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyRight)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_RIGHT);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyEnter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_ENTER);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keySpace)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_SPACE);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyDel)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_BACKSPACE);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::keyESC)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_ESCAPE);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_0);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_2);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_3);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_4);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key5)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_5);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key6)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_6);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_7);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_8);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>Keyboard::key9)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsKeyReleased(KEY_KP_9);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Raylib::isMouseButtonPressed(graphics::MouseButton<sp/>button)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonLeft)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonPressed(MOUSE_BUTTON_LEFT);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonRight)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonPressed(MOUSE_BUTTON_RIGHT);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonMiddle)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonPressed(MOUSE_BUTTON_MIDDLE);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Raylib::isMouseButtonBeingPressed(graphics::MouseButton<sp/>button)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonLeft)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonDown(MOUSE_BUTTON_LEFT);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonRight)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonDown(MOUSE_BUTTON_RIGHT);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonMiddle)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonDown(MOUSE_BUTTON_MIDDLE);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Raylib::isMouseButtonReleased(graphics::MouseButton<sp/>button)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonLeft)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonReleased(MOUSE_BUTTON_LEFT);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonRight)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonReleased(MOUSE_BUTTON_RIGHT);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(button<sp/>==<sp/>graphics::ButtonMiddle)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMouseButtonReleased(MOUSE_BUTTON_MIDDLE);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="structVector2D" kindref="compound">Vector2D&lt;float&gt;</ref><sp/>Raylib::getMousePosition()</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structVector2D" kindref="compound">Vector2D&lt;float&gt;</ref>(GetMouseX(),<sp/>GetMouseY());</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Raylib::playSound(std::string<sp/>page,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>looping)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sounds.find(page)<sp/>==<sp/>_sounds.end())<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>path<sp/>=<sp/>_sound.get&lt;std::string&gt;(page);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sounds.emplace(page,<sp/>LoadSound(path.c_str()));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlaySound(_sounds[page]);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(looping<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!IsSoundPlaying(_sounds[page]))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlaySound(_sounds[page]);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Raylib::stopSound(std::string<sp/>page)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sounds.find(page)<sp/>!=<sp/>_sounds.end()<sp/>&amp;&amp;<sp/>IsSoundPlaying(_sounds[page]))</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopSound(_sounds[page]);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Raylib::setSoundVolume(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>volume)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sound<sp/>:<sp/>_sounds)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetSoundVolume(sound.second,<sp/>volume);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/graphic_lib_encapsulation/Raylib/Raylib.cpp"/>
  </compounddef>
</doxygen>
