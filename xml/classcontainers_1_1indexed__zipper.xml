<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classcontainers_1_1indexed__zipper" kind="class" language="C++" prot="public">
    <compoundname>containers::indexed_zipper</compoundname>
    <includes refid="IndexedZipper_8hpp" local="no">IndexedZipper.hpp</includes>
    <templateparamlist>
      <param>
        <type>class ...</type>
        <declname>Containers</declname>
        <defname>Containers</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classcontainers_1_1indexed__zipper_1ae1046e55bae78a976fbb4a89a5f26129" prot="public" static="no">
        <type><ref refid="classcontainers_1_1indexed__zipper__iterator" kindref="compound">indexed_zipper_iterator</ref>&lt; Containers... &gt;</type>
        <definition>using containers::indexed_zipper&lt; Containers &gt;::iterator =  indexed_zipper_iterator&lt;Containers...&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>containers::indexed_zipper::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="264" column="13" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classcontainers_1_1indexed__zipper_1a738b07a094b07fd38c5a9c2aa708f23b" prot="public" static="no">
        <type>typename iterator::iterator_tuple</type>
        <definition>using containers::indexed_zipper&lt; Containers &gt;::iterator_tuple =  typename iterator::iterator_tuple</definition>
        <argsstring></argsstring>
        <name>iterator_tuple</name>
        <qualifiedname>containers::indexed_zipper::iterator_tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="265" column="13" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcontainers_1_1indexed__zipper_1a6dee5a2a8b5fba5f9b815057c0bccf49" prot="private" static="no" mutable="no">
        <type>iterator_tuple</type>
        <definition>iterator_tuple containers::indexed_zipper&lt; Containers &gt;::_begin</definition>
        <argsstring></argsstring>
        <name>_begin</name>
        <qualifiedname>containers::indexed_zipper::_begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="366" column="28" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcontainers_1_1indexed__zipper_1ae053109fb90cc3e2ee1aa3cd96e009b1" prot="private" static="no" mutable="no">
        <type>iterator_tuple</type>
        <definition>iterator_tuple containers::indexed_zipper&lt; Containers &gt;::_end</definition>
        <argsstring></argsstring>
        <name>_end</name>
        <qualifiedname>containers::indexed_zipper::_end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="367" column="28" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcontainers_1_1indexed__zipper_1a884e107e74335a9ddb63b1754afcabb6" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t containers::indexed_zipper&lt; Containers &gt;::_size</definition>
        <argsstring></argsstring>
        <name>_size</name>
        <qualifiedname>containers::indexed_zipper::_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="368" column="20" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="368" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a1ed5fff402cb7ef6767106237d1e2da4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>containers::indexed_zipper&lt; Containers &gt;::indexed_zipper</definition>
        <argsstring>(Containers &amp;...cs)</argsstring>
        <name>indexed_zipper</name>
        <qualifiedname>containers::indexed_zipper::indexed_zipper</qualifiedname>
        <param>
          <type>Containers &amp;...</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classcontainers_1_1indexed__zipper" kindref="compound">indexed_zipper</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classsparse__array" kindref="compound">sparse_array</ref> lvalue references </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="272" column="13" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a75d5034c93f3bd1bbc7f1bca7e0d9b9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcontainers_1_1indexed__zipper__iterator" kindref="compound">iterator</ref></type>
        <definition>iterator containers::indexed_zipper&lt; Containers &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>containers::indexed_zipper::begin</qualifiedname>
        <briefdescription>
<para>Return first iterator for <ref refid="classcontainers_1_1indexed__zipper" kindref="compound">indexed_zipper</ref> container. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="284" column="22" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1ae08b3517143ee7c58334aa3ba2b985fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcontainers_1_1indexed__zipper__iterator" kindref="compound">iterator</ref></type>
        <definition>iterator containers::indexed_zipper&lt; Containers &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>containers::indexed_zipper::end</qualifiedname>
        <briefdescription>
<para>Return end iterator for <ref refid="classcontainers_1_1indexed__zipper" kindref="compound">indexed_zipper</ref> container. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="294" column="22" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a04a8d157f3b57c30f7dc9e71c35f626a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t containers::indexed_zipper&lt; Containers &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>containers::indexed_zipper::size</qualifiedname>
        <briefdescription>
<para>Getter for zipper&apos;s size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t zipper&apos;s size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="304" column="20" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="304" bodyend="307"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a31d0daeaaace3ffa4849a94e02f1b62c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t containers::indexed_zipper&lt; Containers &gt;::_compute_size</definition>
        <argsstring>(Containers &amp;...containers)</argsstring>
        <name>_compute_size</name>
        <qualifiedname>containers::indexed_zipper::_compute_size</qualifiedname>
        <param>
          <type>Containers &amp;...</type>
          <declname>containers</declname>
        </param>
        <briefdescription>
<para>Compute size which is the smallest container&apos;s size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>containers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of containers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="316" column="27" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="316" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a8fec335106a9c22785ef9968b2d74985" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t containers::indexed_zipper&lt; Containers &gt;::_compute_begin_idx</definition>
        <argsstring>(Containers &amp;...containers)</argsstring>
        <name>_compute_begin_idx</name>
        <qualifiedname>containers::indexed_zipper::_compute_begin_idx</qualifiedname>
        <param>
          <type>Containers &amp;...</type>
          <declname>containers</declname>
        </param>
        <briefdescription>
<para>Compute begin_idx which is index where containers are all set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>containers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of containers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="331" column="27" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="331" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a3477729b06f4ad7a4f4bbdc44c613f18" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator_tuple</type>
        <definition>static iterator_tuple containers::indexed_zipper&lt; Containers &gt;::_compute_begin</definition>
        <argsstring>(Containers &amp;...containers)</argsstring>
        <name>_compute_begin</name>
        <qualifiedname>containers::indexed_zipper::_compute_begin</qualifiedname>
        <param>
          <type>Containers &amp;...</type>
          <declname>containers</declname>
        </param>
        <briefdescription>
<para>Compute iterator_tuple representing zipper&apos;s begin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>containers</parametername>
</parameternamelist>
<parameterdescription>
<para>Containers list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator_tuple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="345" column="35" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classcontainers_1_1indexed__zipper_1a6020f7aba172fa10d797ef12fd176d73" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator_tuple</type>
        <definition>static iterator_tuple containers::indexed_zipper&lt; Containers &gt;::_compute_end</definition>
        <argsstring>(Containers &amp;...containers)</argsstring>
        <name>_compute_end</name>
        <qualifiedname>containers::indexed_zipper::_compute_end</qualifiedname>
        <param>
          <type>Containers &amp;...</type>
          <declname>containers</declname>
        </param>
        <briefdescription>
<para>Compute iterator_tuple representing <ref refid="classcontainers_1_1indexed__zipper" kindref="compound">indexed_zipper</ref>&apos;s end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>containers</parametername>
</parameternamelist>
<parameterdescription>
<para>Conteiners list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator_tuple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="358" column="35" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="358" bodyend="363"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>indexed_Zipper container to allow usage of iterator while handling sparse_arrays </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Containers</parametername>
</parameternamelist>
<parameterdescription>
<para>(Some <ref refid="classsparse__array" kindref="compound">sparse_array</ref> of your choice) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" line="262" column="5" bodyfile="/home/KiNGnL/3ème année/B-CPP-500-COT-5-1-rtype-segnon.gnonlonfoun/ecs_architecture/includes/IndexedZipper.hpp" bodystart="262" bodyend="369"/>
    <listofallmembers>
      <member refid="classcontainers_1_1indexed__zipper_1a6dee5a2a8b5fba5f9b815057c0bccf49" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_begin</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a3477729b06f4ad7a4f4bbdc44c613f18" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_compute_begin</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a8fec335106a9c22785ef9968b2d74985" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_compute_begin_idx</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a6020f7aba172fa10d797ef12fd176d73" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_compute_end</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a31d0daeaaace3ffa4849a94e02f1b62c" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_compute_size</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1ae053109fb90cc3e2ee1aa3cd96e009b1" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_end</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a884e107e74335a9ddb63b1754afcabb6" prot="private" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>_size</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a75d5034c93f3bd1bbc7f1bca7e0d9b9d" prot="public" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>begin</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1ae08b3517143ee7c58334aa3ba2b985fc" prot="public" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>end</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a1ed5fff402cb7ef6767106237d1e2da4" prot="public" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>indexed_zipper</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1ae1046e55bae78a976fbb4a89a5f26129" prot="public" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>iterator</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a738b07a094b07fd38c5a9c2aa708f23b" prot="public" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>iterator_tuple</name></member>
      <member refid="classcontainers_1_1indexed__zipper_1a04a8d157f3b57c30f7dc9e71c35f626a" prot="public" virt="non-virtual"><scope>containers::indexed_zipper</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
